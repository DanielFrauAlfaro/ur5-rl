// Generated by gencpp from file experiment_settings/Object.msg
// DO NOT EDIT!


#ifndef EXPERIMENT_SETTINGS_MESSAGE_OBJECT_H
#define EXPERIMENT_SETTINGS_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace experiment_settings
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : header()
    , chosenObject()
    , pose()
    , orientation()  {
    }
  Object_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , chosenObject(_alloc)
    , pose(_alloc)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _chosenObject_type;
  _chosenObject_type chosenObject;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _pose_type;
  _pose_type pose;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::experiment_settings::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::experiment_settings::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::experiment_settings::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::experiment_settings::Object > ObjectPtr;
typedef boost::shared_ptr< ::experiment_settings::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::experiment_settings::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::experiment_settings::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::experiment_settings::Object_<ContainerAllocator1> & lhs, const ::experiment_settings::Object_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.chosenObject == rhs.chosenObject &&
    lhs.pose == rhs.pose &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::experiment_settings::Object_<ContainerAllocator1> & lhs, const ::experiment_settings::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace experiment_settings

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::experiment_settings::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::experiment_settings::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::experiment_settings::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::experiment_settings::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::experiment_settings::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::experiment_settings::Object_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::experiment_settings::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6189364a18d4f68fba2b3e2a8b22bfc9";
  }

  static const char* value(const ::experiment_settings::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6189364a18d4f68fULL;
  static const uint64_t static_value2 = 0xba2b3e2a8b22bfc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::experiment_settings::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "experiment_settings/Object";
  }

  static const char* value(const ::experiment_settings::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::experiment_settings::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string[] chosenObject\n"
"geometry_msgs/Point[] pose\n"
"geometry_msgs/Point[] orientation\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::experiment_settings::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::experiment_settings::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.chosenObject);
      stream.next(m.pose);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::experiment_settings::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::experiment_settings::Object_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "chosenObject[]" << std::endl;
    for (size_t i = 0; i < v.chosenObject.size(); ++i)
    {
      s << indent << "  chosenObject[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chosenObject[i]);
    }
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pose[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.orientation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPERIMENT_SETTINGS_MESSAGE_OBJECT_H
