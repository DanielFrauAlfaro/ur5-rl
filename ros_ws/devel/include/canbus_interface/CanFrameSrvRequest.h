// Generated by gencpp from file canbus_interface/CanFrameSrvRequest.msg
// DO NOT EDIT!


#ifndef CANBUS_INTERFACE_MESSAGE_CANFRAMESRVREQUEST_H
#define CANBUS_INTERFACE_MESSAGE_CANFRAMESRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace canbus_interface
{
template <class ContainerAllocator>
struct CanFrameSrvRequest_
{
  typedef CanFrameSrvRequest_<ContainerAllocator> Type;

  CanFrameSrvRequest_()
    : arbitration_id(0)
    , data()  {
    }
  CanFrameSrvRequest_(const ContainerAllocator& _alloc)
    : arbitration_id(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _arbitration_id_type;
  _arbitration_id_type arbitration_id;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CanFrameSrvRequest_

typedef ::canbus_interface::CanFrameSrvRequest_<std::allocator<void> > CanFrameSrvRequest;

typedef boost::shared_ptr< ::canbus_interface::CanFrameSrvRequest > CanFrameSrvRequestPtr;
typedef boost::shared_ptr< ::canbus_interface::CanFrameSrvRequest const> CanFrameSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator1> & lhs, const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.arbitration_id == rhs.arbitration_id &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator1> & lhs, const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace canbus_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba91a1cf16899463e5da6dd76315ff65";
  }

  static const char* value(const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba91a1cf16899463ULL;
  static const uint64_t static_value2 = 0xe5da6dd76315ff65ULL;
};

template<class ContainerAllocator>
struct DataType< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "canbus_interface/CanFrameSrvRequest";
  }

  static const char* value(const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 arbitration_id\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arbitration_id);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanFrameSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::canbus_interface::CanFrameSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "arbitration_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.arbitration_id);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CANBUS_INTERFACE_MESSAGE_CANFRAMESRVREQUEST_H
